# This is necessary to read the cluster.key cluster.cert
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  name: system:openshift:scc:anyuid
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:anyuid
subjects:
- kind: Group
  name: system:serviceaccounts:kong
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong
  namespace: kong
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: access-secrets
  namespace: kong
  annotations:
    argocd.argoproj.io/sync-wave: "0"
rules:
  - verbs:
      - get
      - list
      - watch
      - update
      - create
    apiGroups:
      - ''
    resources:
      - secrets
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-to-secrets
  annotations:
    argocd.argoproj.io/sync-wave: "0"
subjects:
  - kind: ServiceAccount
    name: kong
    namespace: kong
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: access-secrets
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cert-secret
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "0"
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: kong
      containers:
      - name: generate-cert-secret
        image: quay.io/mpaulgreen/testimage:6.0
        securityContext:
          runAsUser: 0
        command:
         - "/bin/bash"
         - "-c"
         - "oc create secret tls kong-cluster-cert --cert=./cluster.crt --key=./cluster.key -n kong && echo 'kong certificate secret created'"
      restartPolicy: Never